name: 🛠️ Godot Engine Builds
on:
  # Schedule updates (once every month)
  schedule:
    - cron: "0 0 1 * *"
  workflow_dispatch:
    inputs:
      make-release:
        description: 'Make release'
        required: false
        type: boolean
        default: true
  push:
    branches:
      - main
      - 4.x

# Global Settings
# SCONS_CACHE for windows must be set in the build environment
env:
  # Used for cache key as well as for downloading the correct Godot version.
  GODOT_BASE_VERSION: master
  GODOT_VERSION_STATUS: custom
  GODOT_MONO_BUILD_TAG: release-8767196 #5299efd # mono-6.12.0.182
  GODOT_MONO_BUILD_REPO: godotengine/godot-mono-builds
  VULKAN_SDK_VERSION: 1.3.239.0

jobs:
  ios:
    # Based on https://github.com/godotengine/godot-build-scripts/blob/3.x/build-ios/build.sh
    runs-on: "macos-latest"
    name: 🍏 iOS ${{ matrix.name }}
    env:
      SCONSFLAGS: vulkan_sdk_path=~/VulkanSDK
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Templates
            cache-name: ios
            build-mono: false

          # TEMP: Uncomment once support is added
          # - name: Templates w/ Mono
          #   cache-name: ios-mono
          #   build-mono: true

    steps:
      # region Setup
      - uses: actions/checkout@v3

      - name: Download Godot
        uses: ./.github/actions/godot-download
        with:
          version: ${{ env.GODOT_BASE_VERSION }}

      - name: Setup Godot build cache
        uses: ./.github/actions/godot-cache
        with:
          cache-name: ${{ matrix.cache-name }}
        continue-on-error: true

      - name: Install Vulkan SDK
        run: |
          curl -fLO https://sdk.lunarg.com/sdk/download/${{ env.VULKAN_SDK_VERSION }}/mac/vulkansdk-macos-${{ env.VULKAN_SDK_VERSION }}.dmg
          sudo hdiutil attach vulkansdk-macos-${{ env.VULKAN_SDK_VERSION }}.dmg

          brew install tree
          tree -a /Volumes

          sudo /Volumes/vulkansdk-macos-${{ env.VULKAN_SDK_VERSION }}/InstallVulkan.app/Contents/MacOS/InstallVulkan --root ~/VulkanSDK --accept-licenses --default-answer --confirm-command install

          tree -a ~/VulkanSDK
      
      - name: Setup python and scons
        uses: ./.github/actions/godot-deps
      # endregion

      # region Mono Setup
      - name: Setup mono (arm64)
        if: ${{ matrix.build-mono }}
        uses: ./.github/actions/godot-mono
        with:
          mono-bcl: "bcl-ios"
          mono-release: "ios-arm64"

      - name: Setup mono (x86_64)
        if: ${{ matrix.build-mono }}
        uses: ./.github/actions/godot-mono
        with:
          mono-release: "ios-x86_64"
      
      - name: Mono precompilation
        if: ${{ matrix.build-mono }}
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} ${{ matrix.sconsflags }} module_mono_enabled=yes mono_glue=no
          platform: macos
          target: editor

      # Generate mono glue
      - name: Generate Mono glue code
        if: ${{ matrix.build-mono }}
        run: |
          DRI_PRIME=0 "./bin/godot.macos.editor.x86_64.mono" --headless --generate-mono-glue modules/mono/glue

      - name: Set Mono scons flags
        if: ${{ matrix.build-mono }}
        run: |
          echo "MONO_SCONSFLAGS=module_mono_enabled=yes mono_glue=yes copy_mono_root=yes mono_bcl=$HOME/mono-bcls/ios-bcl/monotouch" >> $GITHUB_ENV
      
      - name: Clear bin
        run: |
          rm -rf bin
      # endregion
      
      # region Templates
      - name: Compilation (arch=arm64, target=template_debug)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} ${{ env.MONO_SCONSFLAGS }} ${{ matrix.sconsflags }} arch=arm64 ${{ matrix.build-mono && 'mono_prefix=$HOME/mono-installs/ios-arm64-release' || '' }}
          platform: iphone
          target: template_debug
      
      - name: Compilation (arch=x86_64, ios_simulator=yes, target=template_debug)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} ${{ env.MONO_SCONSFLAGS }} ${{ matrix.sconsflags }} arch=x86_64 ios_simulator=yes ${{ matrix.build-mono && 'mono_prefix=$HOME/mono-installs/ios-x86_64-release' || '' }}
          platform: iphone
          target: template_debug

      - name: Compilation (arch=arm64, target=template_release)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} ${{ env.MONO_SCONSFLAGS }} ${{ matrix.sconsflags }} arch=arm64 ${{ matrix.build-mono && 'mono_prefix=$HOME/mono-installs/ios-arm64-release' || '' }} debug_symbols=no
          platform: iphone
          target: template_release
      
      - name: Compilation (arch=x86_64, ios_simulator=yes, target=template_release)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} ${{ env.MONO_SCONSFLAGS }} ${{ matrix.sconsflags }} arch=x86_64 ios_simulator=yes ${{ matrix.build-mono && 'mono_prefix=$HOME/mono-installs/ios-x86_64-release' || '' }} debug_symbols=no
          platform: iphone
          target: template_release
      
      - name: Bundle builds
        shell: bash
        run: |
          echo $(basename bin/*)

          mkdir -p $HOME/out/templates
          cp bin/libgodot.ios.template_release.arm64.a $HOME/out/templates/libgodot.ios.a
          cp bin/libgodot.ios.template_debug.arm64.a $HOME/out/templates/libgodot.ios.debug.a
          #$IOS_LIPO -create bin/libgodot.ios.template_release.arm64.simulator.a bin/libgodot.ios.template_release.x86_64.simulator.a -output $HOME/out/templates/libgodot.ios.simulator.a
          #$IOS_LIPO -create bin/libgodot.ios.template_debug.arm64.simulator.a bin/libgodot.ios.template_debug.x86_64.simulator.a -output $HOME/out/templates/libgodot.ios.debug.simulator.a
          cp bin/libgodot.ios.template_release.x86_64.simulator.a $HOME/out/templates/libgodot.ios.simulator.a
          cp bin/libgodot.ios.template_debug.x86_64.simulator.a $HOME/out/templates/libgodot.ios.debug.simulator.a

          if ${{ matrix.build-mono }}; then
            cp -r misc/dist/iphone-mono-libs $HOME/out/templates/iphone-mono-libs

            cp bin/libmonosgen-2.0.ios.arm64.a $HOME/out/templates/iphone-mono-libs/libmonosgen-2.0.xcframework/ios-arm64/libmonosgen.a
            cp bin/libmono-native.ios.arm64.a $HOME/out/templates/iphone-mono-libs/libmono-native.xcframework/ios-arm64/libmono-native.a
            cp bin/libmono-profiler-log.ios.arm64.a $HOME/out/templates/iphone-mono-libs/libmono-profiler-log.xcframework/ios-arm64/libmono-profiler-log.a

            #$IOS_LIPO -create bin/libmonosgen-2.0.ios.arm64.simulator.a bin/libmonosgen-2.0.ios.x86_64.simulator.a -output $HOME/out/templates/iphone-mono-libs/libmonosgen-2.0.xcframework/ios-arm64_x86_64-simulator/libmonosgen.a
            #$IOS_LIPO -create bin/libmono-native.ios.arm64.simulator.a bin/libmono-native.ios.x86_64.simulator.a -output $HOME/out/templates/iphone-mono-libs/libmono-native.xcframework/ios-arm64_x86_64-simulator/libmono-native.a
            #$IOS_LIPO -create bin/libmono-profiler-log.ios.arm64.simulator.a bin/libmono-profiler-log.ios.x86_64.simulator.a -output $HOME/out/templates/iphone-mono-libs/libmono-profiler-log.xcframework/ios-arm64_x86_64-simulator/libmono-profiler-log.a
            cp bin/libmonosgen-2.0.ios.x86_64.simulator.a $HOME/out/templates/iphone-mono-libs/libmonosgen-2.0.xcframework/ios-arm64_x86_64-simulator/libmonosgen.a
            cp bin/libmono-native.ios.x86_64.simulator.a $HOME/out/templates/iphone-mono-libs/libmono-native.xcframework/ios-arm64_x86_64-simulator/libmono-native.a
            cp bin/libmono-profiler-log.ios.x86_64.simulator.a $HOME/out/templates/iphone-mono-libs/libmono-profiler-log.xcframework/ios-arm64_x86_64-simulator/libmono-profiler-log.a

            # The Mono libraries for the interpreter are not available for simulator builds
            cp bin/libmono-ee-interp.ios.arm64.a $HOME/out/templates/iphone-mono-libs/libmono-ee-interp.xcframework/ios-arm64/libmono-ee-interp.a
            cp bin/libmono-icall-table.ios.arm64.a $HOME/out/templates/iphone-mono-libs/libmono-icall-table.xcframework/ios-arm64/libmono-icall-table.a
            cp bin/libmono-ilgen.ios.arm64.a $HOME/out/templates/iphone-mono-libs/libmono-ilgen.xcframework/ios-arm64/libmono-ilgen.a

            mkdir -p $HOME/out/templates/bcl
            cp -r $HOME/mono-bcls/ios-bcl/* $HOME/out/templates/bcl
          fi

          echo "$HOME/out/templates files:"
          echo $(basename $HOME/out/templates/*)

      - name: Upload Templates
        uses: ./.github/actions/upload-artifact
        with:
          path: ~/out/templates
          name: ${{ matrix.cache-name }}-templates
      # endregion
  
  android:
    # Based on https://github.com/godotengine/godot-build-scripts/blob/3.x/build-android/build.sh
    runs-on: "ubuntu-latest"
    name: 🤖 Android ${{ matrix.name }}
    env:
      SCONSFLAGS: 
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Templates
            cache-name: android
            build-mono: false

          # TEMP: Uncomment once support is added
          # - name: Templates w/ Mono
          #   cache-name: android-mono
          #   build-mono: true

    steps:
      # region Setup
      - uses: actions/checkout@v3

      - name: Download Godot
        uses: ./.github/actions/godot-download
        with:
          version: ${{ env.GODOT_BASE_VERSION }}

      - name: Linux dependencies
        shell: bash
        run: |
          sudo apt-get update
          # The actual dependencies
          sudo apt-get install build-essential pkg-config libx11-dev libxcursor-dev \
              libxinerama-dev libgl1-mesa-dev libglu-dev libasound2-dev libpulse-dev \
              libdbus-1-dev libudev-dev libxi-dev libxrandr-dev yasm xvfb unzip \
              libspeechd-dev speech-dispatcher

      - name: Set up Java 11
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 11

      - name: Setup Godot build cache
        uses: ./.github/actions/godot-cache
        with:
          cache-name: ${{ matrix.cache-name }}
        continue-on-error: true

      - name: Setup python and scons
        uses: ./.github/actions/godot-deps
      # endregion

      # region Mono Setup
      - name: Setup mono (arm64v8)
        if: ${{ matrix.build-mono }}
        uses: ./.github/actions/godot-mono
        with:
          mono-bcl: "bcl-android"
          mono-release: "android-arm64v8"
      
      - name: Setup mono (armv7)
        if: ${{ matrix.build-mono }}
        uses: ./.github/actions/godot-mono
        with:
          mono-release: "android-armv7"
      
      - name: Setup mono (x86)
        if: ${{ matrix.build-mono }}
        uses: ./.github/actions/godot-mono
        with:
          mono-release: "android-x86"

      - name: Setup mono (x86_64)
        if: ${{ matrix.build-mono }}
        uses: ./.github/actions/godot-mono
        with:
          mono-release: "android-x86_64"
      
      - name: Mono precompilation
        if: ${{ matrix.build-mono }}
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} ${{ matrix.sconsflags }} module_mono_enabled=yes mono_glue=no
          platform: linuxbsd
          target: editor

      # Generate mono glue
      - name: Generate Mono glue code
        if: ${{ matrix.build-mono }}
        run: |
          DRI_PRIME=0 xvfb-run "./bin/godot.linuxbsd.editor.x86_64.mono" --headless --generate-mono-glue modules/mono/glue || true

      - name: Set Mono scons flags
        if: ${{ matrix.build-mono }}
        run: |
          echo "MONO_SCONSFLAGS=module_mono_enabled=yes mono_glue=yes copy_mono_root=yes mono_bcl=$HOME/mono-bcls/android-bcl/monodroid" >> $GITHUB_ENV
      
      - name: Clear bin
        run: |
          rm -rf bin
      # endregion

      # region Templates

      # region    (target=template_debug)
      - name: Compilation (android_arch=arm64v8, target=template_debug)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} ${{ env.MONO_SCONSFLAGS }} ${{ matrix.sconsflags }} android_arch=arm64v8 ${{ matrix.build-mono && 'mono_prefix=$HOME/mono-installs/android-arm64v8-release' || '' }}
          platform: android
          target: template_debug
      
      - name: Compilation (android_arch=armv7, target=template_debug)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} ${{ env.MONO_SCONSFLAGS }} ${{ matrix.sconsflags }} android_arch=armv7 ${{ matrix.build-mono && 'mono_prefix=$HOME/mono-installs/android-armv7-release' || '' }}
          platform: android
          target: template_debug
      
      - name: Compilation (android_arch=x86, target=template_debug)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} ${{ env.MONO_SCONSFLAGS }} ${{ matrix.sconsflags }} android_arch=x86 ${{ matrix.build-mono && 'mono_prefix=$HOME/mono-installs/android-x86-release' || '' }}
          platform: android
          target: template_debug

      - name: Compilation (android_arch=x86_64, target=template_debug)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} ${{ env.MONO_SCONSFLAGS }} ${{ matrix.sconsflags }} android_arch=x86_64 ${{ matrix.build-mono && 'mono_prefix=$HOME/mono-installs/android-x86_64-release' || '' }}
          platform: android
          target: template_debug
      # endregion

      # region    (target=template_release)
      - name: Compilation (android_arch=arm64v8, target=template_release)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} ${{ env.MONO_SCONSFLAGS }} ${{ matrix.sconsflags }} android_arch=arm64v8 ${{ matrix.build-mono && 'mono_prefix=$HOME/mono-installs/android-arm64v8-release' || '' }} debug_symbols=no
          platform: android
          target: template_release
      
      - name: Compilation (android_arch=armv7, target=template_release)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} ${{ env.MONO_SCONSFLAGS }} ${{ matrix.sconsflags }} android_arch=armv7 ${{ matrix.build-mono && 'mono_prefix=$HOME/mono-installs/android-armv7-release' || '' }} debug_symbols=no
          platform: android
          target: template_release

      - name: Compilation (android_arch=x86, target=template_release)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} ${{ env.MONO_SCONSFLAGS }} ${{ matrix.sconsflags }} android_arch=x86 ${{ matrix.build-mono && 'mono_prefix=$HOME/mono-installs/android-x86-release' || '' }} debug_symbols=no
          platform: android
          target: template_release

      - name: Compilation (android_arch=x86_64, target=template_release)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} ${{ env.MONO_SCONSFLAGS }} ${{ matrix.sconsflags }} android_arch=x86_64 ${{ matrix.build-mono && 'mono_prefix=$HOME/mono-installs/android-x86_64-release' || '' }} debug_symbols=no
          platform: android
          target: template_release
      # endregion

      - name: Package Templates
        run: |
          pushd platform/android/java
          ./gradlew generateGodotTemplates
          popd
          
          mkdir -p $HOME/out/templates
          cp bin/android_source.zip $HOME/out/templates/
          cp bin/android_debug.apk $HOME/out/templates/
          cp bin/android_release.apk $HOME/out/templates/

          if ${{ matrix.build-mono }}; then
            mkdir -p $HOME/out/templates/bcl
            cp -r $HOME/mono-bcls/android-bcl/* $HOME/out/templates/bcl/
          fi

      - name: Upload Templates
        uses: ./.github/actions/upload-artifact
        with:
          path: ~/out/templates
          name: ${{ matrix.cache-name }}-templates
      # endregion
  
  web:
    # Based on https://github.com/godotengine/godot-build-scripts/blob/3.x/build-web/build.sh
    runs-on: "ubuntu-latest"
    name: 🌐 Web ${{ matrix.name }}
    env:
      SCONSFLAGS: mono_static=yes
      EM_VERSION: 3.1.32
      EM_CACHE_FOLDER: "emsdk-cache"
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Templates
            cache-name: web
            build-mono: false

          # TEMP: Uncomment once support is added
          # - name: Templates w/ Mono
          #   cache-name: web-mono
          #   build-mono: true

    steps:
      # region Setup
      - uses: actions/checkout@v3

      - name: Download Godot
        uses: ./.github/actions/godot-download
        with:
          version: ${{ env.GODOT_BASE_VERSION }}

      - name: Linux dependencies
        shell: bash
        run: |
          sudo apt-get update
          # The actual dependencies
          sudo apt-get install build-essential pkg-config libx11-dev libxcursor-dev \
              libxinerama-dev libgl1-mesa-dev libglu-dev libasound2-dev libpulse-dev \
              libdbus-1-dev libudev-dev libxi-dev libxrandr-dev yasm xvfb unzip \
              libspeechd-dev speech-dispatcher

      - name: Set up Emscripten latest
        uses: mymindstorm/setup-emsdk@v12
        continue-on-error: true
        with:
          version: ${{ env.EM_VERSION }}
          actions-cache-folder: ${{ matrix.cache-name }}-${{ env.EM_CACHE_FOLDER }}

      - name: Verify Emscripten setup
        run: |
          emcc -v

      - name: Setup Godot build cache
        uses: ./.github/actions/godot-cache
        with:
          cache-name: ${{ matrix.cache-name }}
        continue-on-error: true

      - name: Setup python and scons
        uses: ./.github/actions/godot-deps
      # endregion

      # region Mono setup
      - name: Setup mono
        if: ${{ matrix.build-mono }}
        uses: ./.github/actions/godot-mono
        with:
          mono-release: "wasm-runtime"
          mono-bcl: "bcl-wasm"

      - name: Mono precompilation
        if: ${{ matrix.build-mono }}
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} ${{ matrix.sconsflags }} module_mono_enabled=yes mono_glue=no
          platform: linuxbsd
          target: editor

      # Generate mono glue
      - name: Generate Mono glue code
        if: ${{ matrix.build-mono }}
        run: |
          DRI_PRIME=0 xvfb-run "./bin/godot.linuxbsd.editor.x86_64.mono" --headless --generate-mono-glue modules/mono/glue || true

      - name: Set Mono scons flags
        if: ${{ matrix.build-mono }}
        run: |
          echo "MONO_SCONSFLAGS=module_mono_enabled=yes mono_glue=yes copy_mono_root=yes mono_prefix=$HOME/mono-installs/wasm-runtime-release mono_bcl=$HOME/mono-bcls/wasm-bcl/wasm" >> $GITHUB_ENV
      
      - name: Clear bin
        run: |
          rm -rf bin
      # endregion

      # region Templates      
      - name: Compilation (target=template_debug)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} ${{ env.MONO_SCONSFLAGS }} ${{ matrix.sconsflags }}
          platform: web
          target: template_debug

      - name: Compilation (target=template_release)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} ${{ env.MONO_SCONSFLAGS }} ${{ matrix.sconsflags }} debug_symbols=no
          platform: web
          target: template_release

      - name: Package Templates
        run: |
          mkdir -p $HOME/out/templates
          cp -rvp bin/*.zip $HOME/out/templates
          rm -f bin/*.zip

          if ${{ matrix.build-mono }}; then
            mkdir -p $HOME/out/templates/bcl
            cp -r $HOME/mono-bcls/wasm-bcl/wasm $HOME/out/templates/bcl/
          fi
        
      - name: Upload Templates
        uses: ./.github/actions/upload-artifact
        with:
          path: ~/out/templates
          name: ${{ matrix.cache-name }}-templates
      # endregion
  
  linux:
    # Based on https://github.com/godotengine/godot-build-scripts/blob/3.x/build-linux/build.sh
    runs-on: "ubuntu-latest"
    name: 🐧 Linux ${{ matrix.name }}
    env:
      SCONSFLAGS: mono_static=yes
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Editor & Templates
            cache-name: linux
            build-mono: false

          - name: Editor & Templates w/ Mono
            cache-name: linux-mono
            build-mono: true

    steps:
      # region Setup
      - uses: actions/checkout@v3

      - name: Download Godot
        uses: ./.github/actions/godot-download
        with:
          version: ${{ env.GODOT_BASE_VERSION }}

      - name: Linux dependencies
        shell: bash
        run: |
          sudo apt-get install xvfb libc6-dev
      
      # region    Linux Toolchain Setup
      - name: Setup Linux toolchain (x86_64)
        uses: ./.github/actions/godot-linux-toolchain
        with:
          toolchain-name: "x86_64-godot-linux-gnu_sdk-buildroot"
      
      - name: Setup Linux toolchain (i686)
        uses: ./.github/actions/godot-linux-toolchain
        with:
          toolchain-name: "i686-godot-linux-gnu_sdk-buildroot"
      # endregion

      - name: Setup Godot build cache
        uses: ./.github/actions/godot-cache
        with:
          cache-name: ${{ matrix.cache-name }}
        continue-on-error: true

      - name: Setup python and scons
        uses: ./.github/actions/godot-deps
      # endregion

      # region Mono Setup
      - name: Setup mono (x86_64)
        if: ${{ matrix.build-mono }}
        uses: ./.github/actions/godot-mono
        with:
          mono-release: "linux-x86_64"
          mono-bcl: "bcl-desktop"
      
      - name: Setup mono (x86)
        if: ${{ matrix.build-mono }}
        uses: ./.github/actions/godot-mono
        with:
          mono-release: "linux-x86"
      
      - name: Mono precompilation
        if: ${{ matrix.build-mono }}
        uses: ./.github/actions/godot-build
        with:
          buildroot: "${{ github.workspace }}/x86_64-godot-linux-gnu_sdk-buildroot/bin"
          sconsflags: ${{ env.SCONSFLAGS }} ${{ matrix.sconsflags }} module_mono_enabled=yes mono_glue=no copy_mono_root=yes mono_bcl=$HOME/mono-bcls/desktop-bcl/net_4_x mono_prefix=$HOME/mono-installs/desktop-linux-x86_64-release
          platform: linuxbsd
          target: editor

      # Generate mono glue
      - name: Generate Mono glue code
        if: ${{ matrix.build-mono }}
        run: |
          DRI_PRIME=0 xvfb-run "./bin/godot.linuxbsd.editor.x86_64.mono" --headless --generate-mono-glue modules/mono/glue || true

      - name: Set Mono scons flags
        if: ${{ matrix.build-mono }}
        run: |
          echo "MONO_SCONSFLAGS=module_mono_enabled=yes mono_glue=yes copy_mono_root=yes mono_bcl=$HOME/mono-bcls/desktop-bcl/net_4_x" >> $GITHUB_ENV

      - name: Clear bin
        run: |
          rm -rf bin
      # endregion
      
      # region Editor
      
      # region    (arch=x86_64)
      - name: Compilation (arch=x86_64)
        uses: ./.github/actions/godot-build
        with:
          buildroot: "${{ github.workspace }}/x86_64-godot-linux-gnu_sdk-buildroot/bin"
          sconsflags: ${{ env.SCONSFLAGS }} ${{ env.MONO_SCONSFLAGS }} ${{ matrix.sconsflags }} arch=x86_64 ${{ matrix.build-mono && 'mono_prefix=$HOME/mono-installs/desktop-linux-x86_64-release' || '' }}
          platform: linuxbsd
          target: editor
      
      - name: Upload Editor (arch=x86_64)
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ matrix.cache-name }}-editor-64

      - name: Clear bin
        run: |
          rm -rf bin
      # endregion

      # region    (arch=x86_32)
      - name: Compilation (arch=x86_32)
        uses: ./.github/actions/godot-build
        with:
          buildroot: "${{ github.workspace }}/i686-godot-linux-gnu_sdk-buildroot/bin"
          sconsflags: ${{ env.SCONSFLAGS }} ${{ env.MONO_SCONSFLAGS }} ${{ matrix.sconsflags }} arch=x86_32 ${{ matrix.build-mono && 'mono_prefix=$HOME/mono-installs/desktop-linux-x86-release' || '' }}
          platform: linuxbsd
          target: editor
      
      - name: Upload Editor (arch=x86_32)
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ matrix.cache-name }}-editor-32
      
      - name: Clear bin
        run: |
          rm -rf bin
      # endregion
      
      # endregion

      # region Templates

      # region    (arch=x86_64)
      - name: Compilation (arch=x86_64, target=template_debug)
        uses: ./.github/actions/godot-build
        with:
          buildroot: "${{ github.workspace }}/x86_64-godot-linux-gnu_sdk-buildroot/bin"
          sconsflags: ${{ env.SCONSFLAGS }} ${{ env.MONO_SCONSFLAGS }} ${{ matrix.sconsflags }} arch=x86_64 ${{ matrix.build-mono && 'mono_prefix=$HOME/mono-installs/desktop-linux-x86_64-release' || '' }}
          platform: linuxbsd
          target: template_debug
      
      - name: Compilation (arch=x86_64, target=template_release)
        uses: ./.github/actions/godot-build
        with:
          buildroot: "${{ github.workspace }}/x86_64-godot-linux-gnu_sdk-buildroot/bin"
          sconsflags: ${{ env.SCONSFLAGS }} ${{ env.MONO_SCONSFLAGS }} ${{ matrix.sconsflags }} arch=x86_64 ${{ matrix.build-mono && 'mono_prefix=$HOME/mono-installs/desktop-linux-x86_64-release' || '' }} debug_symbols=no
          platform: linuxbsd
          target: template_release
      
      - name: Upload Templates (arch=x86_64)
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ matrix.cache-name }}-templates-64
      
      - name: Clear bin
        run: |
          rm -rf bin
      # endregion

      # region    (arch=x86_32)
      - name: Compilation (arch=x86_32, target=template_debug)
        uses: ./.github/actions/godot-build
        with:
          buildroot: "${{ github.workspace }}/i686-godot-linux-gnu_sdk-buildroot/bin"
          sconsflags: ${{ env.SCONSFLAGS }} ${{ env.MONO_SCONSFLAGS }} ${{ matrix.sconsflags }} arch=x86_32 ${{ matrix.build-mono && 'mono_prefix=$HOME/mono-installs/desktop-linux-x86-release' || '' }}
          platform: linuxbsd
          target: template_debug
      
      - name: Compilation (arch=x86_32, target=template_release)
        uses: ./.github/actions/godot-build
        with:
          buildroot: "${{ github.workspace }}/i686-godot-linux-gnu_sdk-buildroot/bin"
          sconsflags: ${{ env.SCONSFLAGS }} ${{ env.MONO_SCONSFLAGS }} ${{ matrix.sconsflags }} arch=x86_32 ${{ matrix.build-mono && 'mono_prefix=$HOME/mono-installs/desktop-linux-x86-release' || '' }} debug_symbols=no
          platform: linuxbsd
          target: template_release
      
      - name: Upload Templates (arch=x86_32)
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ matrix.cache-name }}-templates-32
      
      - name: Clear bin
        run: |
          rm -rf bin
      # endregion

      # endregion
  
  macos:
    # Based on https://github.com/godotengine/godot-build-scripts/blob/3.x/build-macmacos/build.sh
    runs-on: "macos-latest"
    name: 🍎 macOS ${{ matrix.name }}
    env:
      SCONSFLAGS: vulkan_sdk_path=~/VulkanSDK
      STRIP: "strip -u -r"
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Editor & Templates
            cache-name: macos
            build-mono: false

          - name: Editor & Templates w/ Mono
            cache-name: macos-mono
            build-mono: true

    steps:
      # region Setup
      - uses: actions/checkout@v3

      - name: Download Godot
        uses: ./.github/actions/godot-download
        with:
          version: ${{ env.GODOT_BASE_VERSION }}

      - name: Setup Godot build cache
        uses: ./.github/actions/godot-cache
        with:
          cache-name: ${{ matrix.cache-name }}
        continue-on-error: true

      - name: Install Vulkan SDK
        run: |
          curl -fLO https://sdk.lunarg.com/sdk/download/${{ env.VULKAN_SDK_VERSION }}/mac/vulkansdk-macos-${{ env.VULKAN_SDK_VERSION }}.dmg
          sudo hdiutil attach vulkansdk-macos-${{ env.VULKAN_SDK_VERSION }}.dmg

          brew install tree
          tree -a /Volumes

          sudo /Volumes/vulkansdk-macos-${{ env.VULKAN_SDK_VERSION }}/InstallVulkan.app/Contents/MacOS/InstallVulkan --root ~/VulkanSDK --accept-licenses --default-answer --confirm-command install

          tree -a ~/VulkanSDK

      - name: Setup python and scons
        uses: ./.github/actions/godot-deps
      # endregion

      # region Mono Setup
      - name: Setup mono (x86_64)
        if: ${{ matrix.build-mono }}
        uses: ./.github/actions/godot-mono
        with:
          mono-release: "osx-x86_64"  # TODO LATER: might have to rename to macos later if mono-builds repo changes
          mono-bcl: "bcl-desktop"
      
      - name: Setup mono (arm64)
        if: ${{ matrix.build-mono }}
        uses: ./.github/actions/godot-mono
        with:
          mono-release: "osx-arm64"   # TODO LATER: might have to rename to macos later if mono-builds repo changes
      
      - name: Mono precompilation
        if: ${{ matrix.build-mono }}
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} ${{ matrix.sconsflags }} module_mono_enabled=yes mono_glue=no
          platform: macos
          target: editor

      # Generate mono glue
      - name: Generate Mono glue code
        if: ${{ matrix.build-mono }}
        run: |
          DRI_PRIME=0 "./bin/godot.macos.editor.x86_64.mono" --headless --generate-mono-glue modules/mono/glue

      - name: Set Mono scons flags
        if: ${{ matrix.build-mono }}
        run: |
          echo "MONO_SCONSFLAGS=module_mono_enabled=yes mono_glue=yes copy_mono_root=yes mono_bcl=$HOME/mono-bcls/desktop-bcl/net_4_x" >> $GITHUB_ENV
      
      - name: Clear bin
        run: |
          rm -rf bin
      # endregion
      
      # region Editor
      - name: Compilation (arch=x86_64)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} ${{ env.MONO_SCONSFLAGS }} ${{ matrix.sconsflags }} arch=x86_64 ${{ matrix.build-mono && 'mono_prefix=$HOME/mono-installs/desktop-osx-x86_64-release' || '' }}
          platform: macos
          target: editor

      - name: Compilation (arch=arm64)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} ${{ env.MONO_SCONSFLAGS }} ${{ matrix.sconsflags }} arch=arm64 ${{ matrix.build-mono && 'mono_prefix=$HOME/mono-installs/desktop-macos-arm64-release' || '' }}
          platform: macos
          target: editor

      - name: Package Editor (arch=arm64, x86_64)
        run: |
          lipo -create bin/godot.macos.editor.x86_64${{ matrix.build-mono && '.mono' || '' }} \
            bin/godot.macos.editor.arm64${{ matrix.build-mono && '.mono' || '' }} \
            -output bin/godot.macos.editor.universal${{ matrix.build-mono && '.mono' || '' }}
          $STRIP bin/godot.macos.editor.universal${{ matrix.build-mono && '.mono' || '' }}
      
      - name: Upload Editor
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ matrix.cache-name }}-editor
      
      - name: Clear bin
        run: |
          rm -rf bin
      # endregion

      # region Templates
      - name: Compilation (arch=x86_64, target=template_debug)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} ${{ env.MONO_SCONSFLAGS }} ${{ matrix.sconsflags }} arch=x86_64 ${{ matrix.build-mono && 'mono_prefix=$HOME/mono-installs/desktop-macos-x86_64-release' || '' }}
          platform: macos
          target: template_debug

      - name: Compilation (arch=arm64, target=template_debug)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} ${{ env.MONO_SCONSFLAGS }} ${{ matrix.sconsflags }} arch=arm64 ${{ matrix.build-mono && 'mono_prefix=$HOME/mono-installs/desktop-macos-arm64-release' || '' }}
          platform: macos
          target: template_debug

      - name: Compilation (arch=x86_64, target=template_release)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} ${{ env.MONO_SCONSFLAGS }} ${{ matrix.sconsflags }} arch=x86_64 ${{ matrix.build-mono && 'mono_prefix=$HOME/mono-installs/desktop-macos-x86_64-release' || '' }} debug_symbols=no
          platform: macos
          target: template_release

      - name: Compilation (arch=arm64, target=template_release)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} ${{ env.MONO_SCONSFLAGS }} ${{ matrix.sconsflags }} arch=arm64 ${{ matrix.build-mono && 'mono_prefix=$HOME/mono-installs/desktop-macos-arm64-release' || '' }} debug_symbols=no
          platform: macos
          target: template_release

      - name: Package Templates (arch=arm64, x86_64)
        run: |
          lipo -create bin/godot.macos.template_debug.x86_64${{ matrix.build-mono && '.mono' || '' }} bin/godot.macos.template_debug.arm64${{ matrix.build-mono && '.mono' || '' }} -output bin/godot.macos.template_debug.universal${{ matrix.build-mono && '.mono' || '' }}
          $STRIP bin/godot.macos.template_debug.universal${{ matrix.build-mono && '.mono' || '' }}
          lipo -create bin/godot.macos.template_release.x86_64${{ matrix.build-mono && '.mono' || '' }} bin/godot.macos.template_release.arm64${{ matrix.build-mono && '.mono' || '' }} -output bin/godot.macos.template_release.universal${{ matrix.build-mono && '.mono' || '' }}
          $STRIP bin/godot.macos.template_release.universal${{ matrix.build-mono && '.mono' || '' }}
      
      - name: Upload Templates
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ matrix.cache-name }}-templates
      
      - name: Clear bin
        run: |
          rm -rf bin
      # endregion
  
  windows:
    runs-on: "ubuntu-latest"
    name: 🏁 Windows ${{ matrix.name }}
    env:
      SCONSFLAGS: use_mingw=yes
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Editor & Templates
            cache-name: windows
            build-mono: false

          - name: Editor & Templates w/ Mono
            cache-name: windows-mono
            build-mono: true

    steps:
      # region Setup
      - uses: actions/checkout@v3

      - name: Download Godot
        uses: ./.github/actions/godot-download
        with:
          version: ${{ env.GODOT_BASE_VERSION }}

      - name: Linux dependencies
        shell: bash
        run: |
          sudo apt-get update
          # The actual dependencies
          sudo apt-get install build-essential pkg-config libx11-dev libxcursor-dev \
              libxinerama-dev libgl1-mesa-dev libglu-dev libasound2-dev libpulse-dev \
              libdbus-1-dev libudev-dev libxi-dev libxrandr-dev yasm xvfb unzip \
              libspeechd-dev speech-dispatcher libgl1-mesa-glx
          sudo apt-get -f install
      
      - name: Windows dependencies
        shell: bash
        run: |
          sudo apt-get install mingw-w64
          echo "1" | sudo update-alternatives --config x86_64-w64-mingw32-gcc
          echo "1" | sudo update-alternatives --config x86_64-w64-mingw32-g++
          echo "1" | sudo update-alternatives --config i686-w64-mingw32-gcc
          echo "1" | sudo update-alternatives --config i686-w64-mingw32-g++

      - name: Setup Godot build cache
        uses: ./.github/actions/godot-cache
        with:
          cache-name: ${{ matrix.cache-name }}
        continue-on-error: true

      - name: Setup python and scons
        uses: ./.github/actions/godot-deps
      # endregion

      # region Mono Setup
      # Assume mono is already installed on the runner
      - name: Setup mono (x86_64)
        if: ${{ matrix.build-mono }}
        uses: ./.github/actions/godot-mono
        with:
          mono-bcl: "bcl-desktop"
          mono-release: "windows-x86_64"
      
      - name: Setup mono (x86)
        if: ${{ matrix.build-mono }}
        uses: ./.github/actions/godot-mono
        with:
          mono-bcl: "bcl-desktop-win32"
          mono-release: "windows-x86"
      
      - name: Setup mono (linux-x86_64)
        if: ${{ matrix.build-mono }}
        uses: ./.github/actions/godot-mono
        with:
          mono-release: "linux-x86_64"

      - name: Mono precompilation
        if: ${{ matrix.build-mono }}
        uses: ./.github/actions/godot-build
        with:
          sconsflags: mono_static=yes module_mono_enabled=yes mono_glue=no
          platform: linuxbsd
          target: editor

      # Generate mono glue
      - name: Generate Mono glue code
        if: ${{ matrix.build-mono }}
        run: |
          DRI_PRIME=0 xvfb-run "./bin/godot.linuxbsd.editor.x86_64.mono" --headless --generate-mono-glue modules/mono/glue || true
      
      - name: Set Mono scons flags
        if: ${{ matrix.build-mono }}
        run: |
          echo "MONO_SCONSFLAGS=module_mono_enabled=yes mono_glue=yes copy_mono_root=yes mono_bcl=$HOME/mono-bcls/desktop-win32-bcl/net_4_x-win32 mono_static=yes" >> $GITHUB_ENV
      
      - name: Clear bin
        run: |
          rm -rf bin
      # endregion

      # region Editor

      # region    (arch=x86_64)
      - name: Compilation (arch=x86_64)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} ${{ env.MONO_SCONSFLAGS }} ${{ matrix.sconsflags }} arch=x86_64 ${{ matrix.build-mono && 'mono_prefix=$HOME/mono-installs/desktop-windows-x86_64-release' || '' }}
          platform: windows
          target: editor
      
      - name: Upload Editor
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ matrix.cache-name }}-editor-64
      
      - name: Clear bin
        run: |
          rm -rf bin
      # endregion

      # region    (arch=x86_32)
      - name: Compilation (arch=x86_32)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} ${{ env.MONO_SCONSFLAGS }} ${{ matrix.sconsflags }} arch=x86_32 ${{ matrix.build-mono && 'mono_prefix=$HOME/mono-installs/desktop-windows-x86-release' || '' }}
          platform: windows
          target: editor
      
      - name: Upload Templates
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ matrix.cache-name }}-editor-32
      
      - name: Clear bin
        run: |
          rm -rf bin
      # endregion

      # endregion

      # region Templates

      # region    (arch=x86_64)
      - name: Compilation (arch=x86_64, target=template_debug)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} ${{ env.MONO_SCONSFLAGS }} ${{ matrix.sconsflags }} arch=x86_64 ${{ matrix.build-mono && 'mono_prefix=$HOME/mono-installs/desktop-windows-x86_64-release' || '' }}
          platform: windows
          target: template_debug
      
      - name: Compilation (arch=x86_64, target=template_release)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} ${{ env.MONO_SCONSFLAGS }} ${{ matrix.sconsflags }} arch=x86_64 ${{ matrix.build-mono && 'mono_prefix=$HOME/mono-installs/desktop-windows-x86_64-release' || '' }} debug_symbols=no
          platform: windows
          target: template_release

      - name: Upload Templates
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ matrix.cache-name }}-templates-64
      
      - name: Clear bin
        run: |
          rm -rf bin
      # endregion

      # region    (arch=x86_32)
      - name: Compilation (arch=x86_32, target=template_debug)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} ${{ env.MONO_SCONSFLAGS }} ${{ matrix.sconsflags }} arch=x86_32 ${{ matrix.build-mono && 'mono_prefix=$HOME/mono-installs/desktop-windows-x86-release' || '' }}
          platform: windows
          target: template_debug
      
      - name: Compilation (arch=x86_32, target=template_release)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} ${{ env.MONO_SCONSFLAGS }} ${{ matrix.sconsflags }} arch=x86_32 ${{ matrix.build-mono && 'mono_prefix=$HOME/mono-installs/desktop-windows-x86-release' || '' }} debug_symbols=no
          platform: windows
          target: template_release
      
      - name: Upload Editor
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ matrix.cache-name }}-templates-32
      
      - name: Clear bin
        run: |
          rm -rf bin
      # endregion

      # endregion
  
  bundle-export-templates:
    needs: [ios, android, web, linux, macos, windows]
    name: Bundle Export Templates
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Templates
            build-mono: false

          - name: Templates w/ Mono
            build-mono: true
    steps:
      # region Setup
      - uses: actions/checkout@v3

      - name: Download Godot
        uses: ./.github/actions/godot-download
        with:
          version: ${{ env.GODOT_BASE_VERSION }}
      # endregion

      # region    Download Templates      
      - name: Download Linux Templates (arch=x86_64)
        uses: actions/download-artifact@v3
        with:
          name: linux-${{ matrix.build-mono && 'mono-' || '' }}templates-64
          path: linux-${{ matrix.build-mono && 'mono-' || '' }}templates-64
      
      - name: Download Linux Templates (arch=x86_32)
        uses: actions/download-artifact@v3
        with:
          name: linux-${{ matrix.build-mono && 'mono-' || '' }}templates-32
          path: linux-${{ matrix.build-mono && 'mono-' || '' }}templates-32
      
      - name: Download Windows Templates (arch=x86_64)
        uses: actions/download-artifact@v3
        with:
          name: windows-${{ matrix.build-mono && 'mono-' || '' }}templates-64
          path: windows-${{ matrix.build-mono && 'mono-' || '' }}templates-64
      
      - name: Download Windows Templates (arch=x86_32)
        uses: actions/download-artifact@v3
        with:
          name: windows-${{ matrix.build-mono && 'mono-' || '' }}templates-32
          path: windows-${{ matrix.build-mono && 'mono-' || '' }}templates-32
      
      - name: Download MacOS Templates
        uses: actions/download-artifact@v3
        with:
          name: macos-${{ matrix.build-mono && 'mono-' || '' }}templates
          path: macos-${{ matrix.build-mono && 'mono-' || '' }}templates
      
      - name: Download Android Templates
        uses: actions/download-artifact@v3
        if: ${{ !matrix.build-mono }} # TEMP: Remove once support is added
        with:
          name: android-${{ matrix.build-mono && 'mono-' || '' }}templates
          path: android-${{ matrix.build-mono && 'mono-' || '' }}templates
      
      - name: Download Web Templates
        uses: actions/download-artifact@v3
        if: ${{ !matrix.build-mono }} # TEMP: Remove once support is added
        with:
          name: web-${{ matrix.build-mono && 'mono-' || '' }}templates 

      - name: Download iOS Templates
        uses: actions/download-artifact@v3
        if: ${{ !matrix.build-mono }} # TEMP: Remove once support is added
        with:
          name: ios-${{ matrix.build-mono && 'mono-' || '' }}templates
          path: ios-${{ matrix.build-mono && 'mono-' || '' }}templates
      # endregion
      
      # region    Download Mono Editors
      # These are used for fetching the BCL libraries
      - name: Download Linux Mono Editor (arch=x86_64)
        uses: actions/download-artifact@v3
        if: ${{ matrix.build-mono }}
        with:
          name: linux-mono-editor-64
          path: linux-mono-editor-64
      
      - name: Download Windows Mono Editor (arch=x86_64)
        uses: actions/download-artifact@v3
        if: ${{ matrix.build-mono }}
        with:
          name: windows-mono-editor-64
          path: windows-mono-editor-64
      # endregion

      - name: Debug Print
        run: |
          sudo apt-get install tree
          tree -a .
      # endregion

      - name: Setup ENV Vars
        run: |
          echo "TEMPLATES_VERSION=${{ format('{0}.{1}', env.GODOT_BASE_VERSION, env.GODOT_VERSION_STATUS) }}${{ matrix.build-mono && '.mono' || '' }}" >> $GITHUB_ENV

          echo "RELDIR=$HOME/releases" >> $GITHUB_ENV
          echo "GODOT_BASENAME=Godot_v${{ format('{0}-{1}', env.GODOT_BASE_VERSION, env.GODOT_VERSION_STATUS) }}" >> $GITHUB_ENV
          echo "TEMPLATES_DIR=$HOME/templates" >> $GITHUB_ENV

      - name: Setup Directories
        run: |
          mkdir -p ${{ env.TEMPLATES_DIR }}
          mkdir -p ${{ env.RELDIR }}

      - name: Bundle Linux
        run: |
          # TODO: Check if bcl folders are needed once 4.0 release comes out
          #       If they are no longer needed, then delete bcl generation from code
          
          if ${{ matrix.build-mono }}; then
            cp -rp linux-mono-templates-64/data.mono.linuxbsd.x86_64.* ${{ env.TEMPLATES_DIR }}/
            cp -rp linux-mono-templates-32/data.mono.linuxbsd.x86_32.* ${{ env.TEMPLATES_DIR }}/
            mkdir -p ${{ env.TEMPLATES_DIR }}/bcl
          fi
          cp linux-${{ matrix.build-mono && 'mono-' || '' }}templates-64/godot.linuxbsd.template_release.x86_64${{ matrix.build-mono && '.mono' || '' }} ${{ env.TEMPLATES_DIR }}/linuxbsd_64_release
          cp linux-${{ matrix.build-mono && 'mono-' || '' }}templates-64/godot.linuxbsd.template_debug.x86_64${{ matrix.build-mono && '.mono' || '' }} ${{ env.TEMPLATES_DIR }}/linuxbsd_64_debug
          cp linux-${{ matrix.build-mono && 'mono-' || '' }}templates-32/godot.linuxbsd.template_release.x86_32${{ matrix.build-mono && '.mono' || '' }} ${{ env.TEMPLATES_DIR }}/linuxbsd_32_release
          cp linux-${{ matrix.build-mono && 'mono-' || '' }}templates-32/godot.linuxbsd.template_debug.x86_32${{ matrix.build-mono && '.mono' || '' }} ${{ env.TEMPLATES_DIR }}/linuxbsd_32_debug
          strip ${{ env.TEMPLATES_DIR }}/linuxbsd_*

      - name: Bundle Windows
        run: |
          if ${{ matrix.build-mono }}; then
            cp -rp windows-mono-templates-64/data.mono.windows.x86_64.* ${{ env.TEMPLATES_DIR }}/
            cp -rp windows-mono-templates-32/data.mono.windows.x86_32.* ${{ env.TEMPLATES_DIR }}/
            mkdir -p ${{ env.TEMPLATES_DIR }}/bcl
          fi
          cp windows-${{ matrix.build-mono && 'mono-' || '' }}templates-64/godot.windows.template_release.x86_64${{ matrix.build-mono && '.mono' || '' }}.exe ${{ env.TEMPLATES_DIR }}/windows_64_release.exe
          cp windows-${{ matrix.build-mono && 'mono-' || '' }}templates-64/godot.windows.template_debug.x86_64${{ matrix.build-mono && '.mono' || '' }}.exe ${{ env.TEMPLATES_DIR }}/windows_64_debug.exe
          cp windows-${{ matrix.build-mono && 'mono-' || '' }}templates-32/godot.windows.template_release.x86_32${{ matrix.build-mono && '.mono' || '' }}.exe ${{ env.TEMPLATES_DIR }}/windows_32_release.exe
          cp windows-${{ matrix.build-mono && 'mono-' || '' }}templates-32/godot.windows.template_debug.x86_32${{ matrix.build-mono && '.mono' || '' }}.exe ${{ env.TEMPLATES_DIR }}/windows_32_debug.exe
          strip ${{ env.TEMPLATES_DIR }}/windows*.exe

      - name: Bundle MacOS
        run: |
          rm -rf macos_template.app
          cp -r misc/dist/macos_template.app .
          mkdir -p macos_template.app/Contents/MacOS
          cp macos-${{ matrix.build-mono && 'mono-' || '' }}templates/godot.macos.template_release.universal${{ matrix.build-mono && '.mono' || '' }} macos_template.app/Contents/MacOS/godot_macos_release.x86_64
          cp macos-${{ matrix.build-mono && 'mono-' || '' }}templates/godot.macos.template_debug.universal${{ matrix.build-mono && '.mono' || '' }} macos_template.app/Contents/MacOS/godot_macos_debug.x86_64
          if ${{ matrix.build-mono }}; then
            cp -rp macos-mono-templates/data.mono.macos.x86_64.* macos_template.app/Contents/Resources/
          fi
          chmod +x macos_template.app/Contents/MacOS/godot_macos*
          zip -q -9 -r "${{ env.TEMPLATES_DIR }}/macos.zip" macos_template.app
          rm -rf macos_template.app
          # TODO: Create MacOS signing
          # sign_macos_template ${{ env.TEMPLATES_DIR }} 0

      - name: Bundle Web
        if: ${{ !matrix.build-mono }} # TEMP: Remove once support is added
        run: |
          if ${{ matrix.build-mono }}; then
              mkdir -p ${{ env.TEMPLATES_DIR }}/bcl
              cp -r web-mono-templates/bcl/wasm ${{ env.TEMPLATES_DIR }}/bcl/
          fi
          cp godot.web.template_debug.wasm32.${{ matrix.build-mono && 'mono.' || '' }}zip ${{ env.TEMPLATES_DIR }}/web_debug.zip
          cp godot.web.template_release.wasm32.${{ matrix.build-mono && 'mono.' || '' }}zip ${{ env.TEMPLATES_DIR }}/web_release.zip

      - name: Bundle Android
        if: ${{ !matrix.build-mono }} # TEMP: Remove once support is added
        run: |
          if ${{ matrix.build-mono }}; then
            mkdir -p ${{ env.TEMPLATES_DIR }}/bcl
            cp -r android-mono-templates/bcl/godot_android_ext ${{ env.TEMPLATES_DIR }}/bcl/
            cp -r android-mono-templates/bcl/monodroid ${{ env.TEMPLATES_DIR }}/bcl/
          fi
          cp android-${{ matrix.build-mono && 'mono-' || '' }}templates/godot-lib.release.aar ${{ env.RELDIR }}/godot-lib.${{ env.TEMPLATES_VERSION }}.release.aar
          cp android-${{ matrix.build-mono && 'mono-' || '' }}templates/*.apk ${{ env.TEMPLATES_DIR }}/
          cp android-${{ matrix.build-mono && 'mono-' || '' }}templates/android_source.zip ${{ env.TEMPLATES_DIR }}/

      - name: Bundle iOS
        if: ${{ !matrix.build-mono }} # TEMP: Remove once support is added
        run: |
          if ${{ matrix.build-mono }}; then
            mkdir -p ${{ env.TEMPLATES_DIR }}/bcl
            cp -r ios-mono-templates/bcl/monotouch* ${{ env.TEMPLATES_DIR }}/bcl/
            cp -r ios-mono-templates/iphone-mono-libs ${{ env.TEMPLATES_DIR }}
          fi
          rm -rf ios_xcode
          cp -r misc/dist/ios_xcode ios_xcode
          cp ios-${{ matrix.build-mono && 'mono-' || '' }}templates/libgodot.ios.simulator.a ios_xcode/libgodot.ios.release.xcframework/ios-arm64_x86_64-simulator/libgodot.a
          cp ios-${{ matrix.build-mono && 'mono-' || '' }}templates/libgodot.ios.debug.simulator.a ios_xcode/libgodot.ios.debug.xcframework/ios-arm64_x86_64-simulator/libgodot.a
          cp ios-${{ matrix.build-mono && 'mono-' || '' }}templates/libgodot.ios.a ios_xcode/libgodot.ios.release.xcframework/ios-arm64/libgodot.a
          cp ios-${{ matrix.build-mono && 'mono-' || '' }}templates/libgodot.ios.debug.a ios_xcode/libgodot.ios.debug.xcframework/ios-arm64/libgodot.a
          cd ios_xcode
          
          zip -q -9 -r "${{ env.TEMPLATES_DIR }}/iphone.zip" *
          cd ..
          rm -rf ios_xcode

      - name: Create Templates TPZ
        run: |
          echo "${{ env.TEMPLATES_VERSION }}" > ${{ env.TEMPLATES_DIR }}/version.txt
          pushd ${{ env.TEMPLATES_DIR }}/..
          zip -q -9 -r -D "${{ env.RELDIR }}/${{ env.GODOT_BASENAME }}_export-templates${{ matrix.build-mono && '-mono' || '' }}.tpz" templates/*
          popd

      - name: Upload Android Template
        uses: ./.github/actions/upload-artifact
        if: ${{ !matrix.build-mono }} # TEMP: Remove once support is added
        with:
          path: ${{ env.RELDIR }}/godot-lib.${{ env.TEMPLATES_VERSION }}.release.aar
          name: android-library${{ matrix.build-mono && '-mono' || '' }}
      
      - name: Upload Export Templates TPZ
        uses: ./.github/actions/upload-artifact
        with:
          path: ${{ env.RELDIR }}/${{ env.GODOT_BASENAME }}_export-templates${{ matrix.build-mono && '-mono' || '' }}.tpz
          name: export-templates${{ matrix.build-mono && '-mono' || '' }}

  create-release:
    if: success() && (
        (github.event_name == 'push') ||
        (github.event_name == 'schedule') ||
        (github.event_name == 'workflow_dispatch' && inputs.make-release)
      )
    needs: [ios, android, web, linux, macos, windows, bundle-export-templates]
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tag-name.outputs.tag }}
    steps:
      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d(%H-%M-%S)')" >> $GITHUB_OUTPUT

      - name: Short SHA
        id: short-sha
        run: echo "sha7=$(echo ${GITHUB_SHA} | cut -c1-7)" >> $GITHUB_OUTPUT
      
      - name: Tag Name
        id: tag-name
        run: echo "tag=release-${{ steps.short-sha.outputs.sha7 }}-${{ steps.date.outputs.date }}" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v0.1.15
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag-name.outputs.tag }}
          name: Release ${{ steps.short-sha.outputs.sha7 }} with ${{ env.GODOT_MONO_BUILD_TAG }}
          body: |
            Godot Mono Build Version: ${{ env.GODOT_MONO_BUILD_TAG }}
          draft: false
          prerelease: false
  
  upload-release-export-templates: 
    if: success() && (
        (github.event_name == 'push') ||
        (github.event_name == 'schedule') ||
        (github.event_name == 'workflow_dispatch' && inputs.make-release)
      )
    needs: create-release
    name: Upload Release Export Templates
    runs-on: ubuntu-latest
    strategy:
      matrix:
        artifact_name: [
          # Regular builds
          export-templates,

          # Mono builds
          export-templates-mono
        ]
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.artifact_name }}
          path: ./

      - name: Debug
        shell: bash
        run: ls
      
      - name: Upload Artifact
        uses: softprops/action-gh-release@v0.1.15
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.create-release.outputs.tag }}
          files: ./Godot_v${{ format('{0}-{1}', env.GODOT_BASE_VERSION, env.GODOT_VERSION_STATUS) }}_${{ matrix.artifact_name }}.tpz

  upload-release-artifacts: 
    if: success() && (
        (github.event_name == 'push') ||
        (github.event_name == 'schedule') ||
        (github.event_name == 'workflow_dispatch' && inputs.make-release)
      )
    needs: create-release
    name: Upload Release Artifacts
    runs-on: ubuntu-latest
    strategy:
      matrix:
        artifact_name: [
          # Regular builds
          linux-editor-64, linux-editor-32, linux-templates-64, linux-templates-32,
          windows-editor-64, windows-editor-32, windows-templates-64, windows-templates-32,
          macos-editor, macos-templates,
          android-templates,
          web-templates,
          ios-templates,
          android-library,

          # Mono builds
          linux-mono-editor-64, linux-mono-editor-32, linux-mono-templates-64, linux-mono-templates-32,
          windows-mono-editor-64, windows-mono-editor-32, windows-mono-templates-64, windows-mono-templates-32,
          macos-mono-editor, macos-mono-templates,
          
          # TEMP: Uncomment once support is added
          #android-mono-templates,
          #web-mono-templates,
          #ios-mono-templates,
          #android-library-mono
        ]
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.artifact_name }}
          path: ./${{ matrix.artifact_name }}
      
      - name: Zip Artifact
        run: |
          original_path=$(pwd)
          pushd ${{ matrix.artifact_name }}
          zip -ry ${original_path}/${{ matrix.artifact_name }}.zip *
          popd

      - name: Debug
        shell: bash
        run: ls

      - name: Upload Artifact
        uses: softprops/action-gh-release@v0.1.15
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.create-release.outputs.tag }}
          files: ./${{ matrix.artifact_name }}.zip